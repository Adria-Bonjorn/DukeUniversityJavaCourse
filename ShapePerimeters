package edu;

import edu.duke.*;
import java.io.File;

public class PerimeterAssignmentRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }

    public int getNumPoints (Shape s) {
        int Num = 0;
        for(Point Pt: s.getPoints()){
        Num = Num + 1;
        }
        return Num;
    }

    public double getAverageLength(Shape s) {   
        double Perimeter = getPerimeter(s);
        int Num = getNumPoints(s);
        double AvLen = Perimeter / Num;
        return AvLen;
    }

    public double getLargestSide(Shape s) {
        double Largest = 0.0;
        
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Compare currDist to Largest
            if (currDist > Largest){
            Largest = currDist;
            }
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        return Largest;
    }

    public double getLargestX(Shape s) {
        // Put code here
        return 0.0;
    }

    public double getLargestPerimeterMultipleFiles() {
        double currPerim;
        double LargestPerim = 0.0;
        DirectoryResource dr = new DirectoryResource();
        for (File f: dr.selectedFiles()){
            
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            currPerim=getPerimeter(s);
            if (currPerim > LargestPerim){
            LargestPerim=currPerim;
            }
            
        }
        
        return LargestPerim;
    }

    public String getFileWithLargestPerimeter() {
        // Put code here
        double currPerim;
        double LargestPerim = 0.0;
        File FileLargestPerim = null;
        DirectoryResource dr = new DirectoryResource();
        for (File f: dr.selectedFiles()){
            
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            currPerim=getPerimeter(s);
            if (currPerim > LargestPerim){
            LargestPerim=currPerim;
            FileLargestPerim = f;
            }
            
        } 
        File temp = FileLargestPerim;    // replace this code
        return temp.getName();
    }

    public void testPerimeter () {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        double length = getPerimeter(s);
        int Num = getNumPoints(s);
        double AvLen = getAverageLength(s);
        double Largest = getLargestSide(s);
        System.out.println("perimeter = " + length);
        System.out.println("Number of points = " + Num);
        System.out.println("Average length = " + AvLen);
        System.out.println("Largest side = " + Largest);
    }
    
    public void testPerimeterMultipleFiles() {
        double LargestPerim = getLargestPerimeterMultipleFiles();
        System.out.println("Largest perimeter of all files = " + LargestPerim);
    }

    public void testFileWithLargestPerimeter() {
        String f= getFileWithLargestPerimeter();
        System.out.println("The file with the largest perimeter is: " + f);
    }

    // This method creates a triangle that you can use to test your other methods
    public void triangle(){
        Shape triangle = new Shape();
        triangle.addPoint(new Point(0,0));
        triangle.addPoint(new Point(6,0));
        triangle.addPoint(new Point(3,6));
        for (Point p : triangle.getPoints()){
            System.out.println(p);
        }
        double peri = getPerimeter(triangle);
        System.out.println("perimeter = "+peri);
    }

    // This method prints names of all files in a chosen folder that you can use to test your other methods
    public void printFileNames() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            System.out.println(f);
        }
    }

    public static void main (String[] args) {
        PerimeterAssignmentRunner pr = new PerimeterAssignmentRunner();
        pr.testPerimeter();
        pr.testPerimeterMultipleFiles();
        pr.testFileWithLargestPerimeter();
    }
}
